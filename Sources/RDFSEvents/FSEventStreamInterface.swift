//
//  FSEventStreamInterface.swift
//  RDFSEvents
//
//  Created by Roman Dzieciol on 3/30/19.
//

import Foundation
import CoreFoundation
import CoreServices.FSEvents

@available(OSX 10.13, *)
public protocol FSEventStreamInterface {

    var pathsToWatch: [String] { get }
    var sinceWhen: FSEventStream.EventId { get }
    var latency: TimeInterval { get }
    var flags: FSEventStream.CreateFlags { get }

    /// Attempts to register with the FS Events service to receive events
    /// per the parameters in the stream. FSEventStreamStart() can only
    /// be called once the stream has been scheduled on at least one
    /// runloop, via FSEventStreamScheduleWithRunLoop(). Once started,
    /// the stream can be stopped via FSEventStreamStop().
    ///
    /// - Returns: True if it succeeds, otherwise False if it fails.  It ought to
    ///   always succeed, but in the event it does not then your code
    ///   should fall back to performing recursive scans of the directories
    ///   of interest as appropriate.
    func start() -> Bool

    /// Unregisters with the FS Events service.  The client callback will
    /// not be called for this stream while it is stopped.
    /// FSEventStreamStop() can only be called if the stream has been
    /// started, via FSEventStreamStart(). Once stopped, the stream can
    /// be restarted via FSEventStreamStart(), at which point it will
    /// resume receiving events from where it left off ("sinceWhen").
    func stop()

    /// Invalidates the stream, like CFRunLoopSourceInvalidate() does for
    /// a CFRunLoopSourceRef.  It will be unscheduled from any runloops
    /// or dispatch queues upon which it had been scheduled.
    /// FSEventStreamInvalidate() can only be called on the stream after
    /// you have called FSEventStreamScheduleWithRunLoop() or
    /// FSEventStreamSetDispatchQueue().
    func invalidate()

    /// This function schedules the stream on the specified dispatch
    /// queue. The caller is responsible for ensuring that the stream is
    /// scheduled on a dispatch queue and that the queue is started. If
    /// there is a problem scheduling the stream on the queue an error
    /// will be returned when you try to Start the stream. To start
    /// receiving events on the stream, call FSEventStreamStart(). To
    /// remove the stream from the queue on which it was scheduled, call
    /// FSEventStreamSetDispatchQueue() with a NULL queue parameter or
    /// call FSEventStreamInvalidate() which will do the same thing.
    /// Note: you must eventually call FSEventStreamInvalidate() and it
    /// is an error to call FSEventStreamInvalidate() without having the
    /// stream either scheduled on a runloop or a dispatch queue, so do
    /// not set the dispatch queue to NULL before calling
    /// FSEventStreamInvalidate().
    ///
    /// - Parameter dispatchQueue: The dispatch queue to use to receive events
    ///     (or NULL to to stop receiving events from the stream).
    func set(dispatchQueue: DispatchQueue)

    /// This function schedules the stream on the specified run loop,
    /// like CFRunLoopAddSource() does for a CFRunLoopSourceRef.  The
    /// caller is responsible for ensuring that the stream is scheduled
    /// on at least one run loop and that at least one of the run loops
    /// on which the stream is scheduled is being run. To start receiving
    /// events on the stream, call FSEventStreamStart(). To remove the
    /// stream from the run loops upon which it has been scheduled, call
    /// FSEventStreamUnscheduleFromRunLoop() or FSEventStreamInvalidate().
    ///
    /// - Parameters:
    ///   - runLoop: The run loop on which to schedule the stream.
    ///   - mode: A run loop mode on which to schedule the stream.
    func schedule(with runLoop: RunLoop, mode: RunLoop.Mode)

    /// This function removes the stream from the specified run loop,
    /// like CFRunLoopRemoveSource() does for a CFRunLoopSourceRef.
    ///
    /// - Parameters:
    ///   - runLoop: The run loop from which to unschedule the stream.
    ///   - mode: The run loop mode from which to unschedule the stream.
    func unschedule(from runLoop: RunLoop, mode: RunLoop.Mode)

    /// Fetches the sinceWhen property of the stream.  Upon receiving an
    /// event (and just before invoking the client's callback) this
    /// attribute is updated to the highest-numbered event ID mentioned
    /// in the event.
    ///
    /// - Returns: The sinceWhen attribute of the stream.
    func latestEventId() -> FSEventStream.EventId

    /// Fetches the most recently generated event ID, system-wide (not
    /// just for one stream). By thetime it is returned to your
    /// application even newer events may have already been generated.
    ///
    /// - Returns: The event ID of the most recent event generated by the system.
    static func currentEventId() -> FSEventStream.EventId

    /// Asks the FS Events service to flush out any events that have
    /// occurred but have not yet been delivered, due to the latency
    /// parameter that was supplied when the stream was created.  This
    /// flushing occurs synchronously -- by the time this call returns,
    /// your callback will have been invoked for every event that had
    /// already occurred at the time you made this call.
    /// FSEventStreamFlushSync() can only be called after the stream has
    /// been started, via FSEventStreamStart().
    func flushSync()

    /// Asks the FS Events service to flush out any events that have
    /// occurred but have not yet been delivered, due to the latency
    /// parameter that was supplied when the stream was created.  This
    /// flushing occurs asynchronously -- do not expect the events to
    /// have already been delivered by the time this call returns.
    /// FSEventStreamFlushAsync() can only be called after the stream has
    /// been started, via FSEventStreamStart().
    ///
    /// - Returns: The largest event id of any event ever queued for this stream,
    ///   otherwise zero if no events have been queued for this stream.
    func flushAsync() -> FSEventStream.EventId

    /// Sets directories to be filtered from the EventStream.
    /// A maximum of 8 directories maybe specified.
    ///
    /// - Parameter paths: Up to 8 directories to be filtered from the EventStream.
    /// - Returns: True if it succeeds, otherwise False if it fails.
    func exclude(paths: [String]) -> Bool

}
